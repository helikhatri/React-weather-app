[{"H:\\projects\\React_Training\\React-weather-app\\src\\index.js":"1","H:\\projects\\React_Training\\React-weather-app\\src\\App.js":"2","H:\\projects\\React_Training\\React-weather-app\\src\\Forecast\\Forecast.js":"3","H:\\projects\\React_Training\\React-weather-app\\src\\Conditions\\Conditions.js":"4"},{"size":229,"mtime":1610968923900,"results":"5","hashOfConfig":"6"},{"size":374,"mtime":1610972375757,"results":"7","hashOfConfig":"6"},{"size":3091,"mtime":1610973653822,"results":"8","hashOfConfig":"6"},{"size":568,"mtime":1610973417529,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1n43vz9",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\projects\\React_Training\\React-weather-app\\src\\index.js",[],["20","21"],"H:\\projects\\React_Training\\React-weather-app\\src\\App.js",[],"H:\\projects\\React_Training\\React-weather-app\\src\\Forecast\\Forecast.js",["22"],"import React, { useState } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport classes from './Forecast.module.css';\r\n\r\n const Forecast = (props) =>\r\n {\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [city, setCity] = useState('');\r\n    let [unit, setUnit] = useState('imperial');\r\n    const uriEncodedCity = encodeURIComponent(city);\r\n   let [error, setError] = useState(false);\r\n   let [loading, setLoading] = useState(false);\r\n\r\n    function getForecast(e) {\r\n        e.preventDefault();\r\n        if (city.length === 0) {\r\n            return setError(true);\r\n        }\r\n        // Clear state in preparation for new data\r\n   setError(false);\r\n   setResponseObj({});\r\n  \r\n   setLoading(true);\r\n  \r\n   let uriEncodedCity = encodeURIComponent(city);\r\nfetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\r\n       \"method\": \"GET\",\r\n       \"headers\": {\r\n           \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n           \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\r\n       }\r\n   })\r\n   .then(response => response.json())\r\n   .then(response => {\r\n       if (response.cod !== 200) {\r\n           throw new Error()\r\n       }\r\n       setResponseObj(response);\r\n       setLoading(false);\r\n   })\r\n   .catch(err => {\r\n       setError(true);\r\n       setLoading(false);\r\n       console.log(err.message);\r\n   });\r\n }\r\n return(\r\n   \r\n    <div>\r\n         {props.error && <small>Please enter a valid city.</small>}\r\n    {props.loading && <div>Loading...</div>}\r\n           <h2>Find Current Weather Conditions</h2>\r\n           ...\r\n            <form onSubmit={getForecast}>\r\n            <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter City\"\r\n                    maxLength=\"50\"\r\n                    className={classes.textInput}\r\n                    value={city}\r\n                    onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n               <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Fahrenheit\r\n                </label>\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Celcius\r\n                </label>\r\n\r\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\r\n\r\n            </form>\r\n...\r\n<Conditions\r\n              responseObj={responseObj}\r\n              error={error} //new\r\n              loading={loading} //new\r\n              />\r\n       </div>\r\n )\r\n }\r\n export default Forecast;","H:\\projects\\React_Training\\React-weather-app\\src\\Conditions\\Conditions.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":10,"column":11,"nodeType":"29","messageId":"30","endLine":10,"endColumn":25},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'uriEncodedCity' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]